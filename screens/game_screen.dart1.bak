import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import '../state/game_state.dart';
import '../utils/word_dictionary.dart';

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  _GameScreenState createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final TextEditingController _wordController = TextEditingController();
  bool _isWordInvalid = false;
  String? _wordDescription;
  final List<String> _submittedWords = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(Intl.message('Game Screen')),
        actions: [
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: () async {
              await _auth.signOut();
              Navigator.pushReplacementNamed(context, '/login');
            },
            tooltip: Intl.message('Logout'),
          ),
        ],
      ),
      body: Center(
        child: Consumer<GameState>(
          builder: (context, gameState, child) {
            return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('${Intl.message('Your Score: ')}${gameState.score}'),
                const SizedBox(height: 20),
                TextField(
                  controller: _wordController,
                  onChanged: (value) {
                    setState(() {
                      _isWordInvalid = false; // Reset invalid state on new input
                    });
                  },
                  decoration: InputDecoration(
                    hintText: Intl.message('Enter your word'),
                    border: const OutlineInputBorder(),
                    errorText: _isWordInvalid ? 'Invalid word!' : null,
                  ),
                ),
                const SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () async {
                    final word = _wordController.text.trim();
                    final userId = _auth.currentUser?.uid ?? 'unknown_user'; // Fetch current user's ID
                    if (word.isNotEmpty) {
                      final description = await WordDictionary.getWordDescription(word);
                      setState(() {
                        _wordDescription = description;
                        _isWordInvalid = description == 'No relevant information found.';
                        if (_wordDescription != 'No relevant information found.') {
                          _submittedWords.add(word); // Store the word if valid

                          // Update GameState by adding the word
                          gameState.addWord(word, userId);
                        }
                      });
                    }
                  },
                  child: Text(Intl.message('Submit Word')),
                ),
                const SizedBox(height: 10),
                if (_submittedWords.isNotEmpty) ...[
                  Text('Submitted Words: ${_submittedWords.join(', ')}'),
                ],
                const SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () {
                    if (_wordDescription != null) {
                      _showMeaningDialog(context, _wordDescription!);
                    }
                  },
                  child: Text('Meaning of the Word'),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  void _showMeaningDialog(BuildContext context, String description) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Meaning of the Word'),
          content: SingleChildScrollView(
            child: Text(description, style: TextStyle(fontSize: 16)),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }
}
