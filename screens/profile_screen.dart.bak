import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import '../models/user_model.dart';
import 'package:intl/intl.dart'; // Import for date formatting

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  bool _isLoading = true; // Loading state variable
  String? _errorMessage; // Error message variable

  @override
  void initState() {
    super.initState();
    // Fetch user data when the screen initializes
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final userModel = Provider.of<UserModel>(context, listen: false);
      _fetchUserData(userModel);
    });
  }

  @override
  Widget build(BuildContext context) {
    final user = _auth.currentUser;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Profile'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: _isLoading
            ? const Center(child: CircularProgressIndicator()) // Show loading indicator
            : _errorMessage != null
                ? Center(child: Text(_errorMessage!)) // Show error message
                : Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      if (user != null) ...[
                        CircleAvatar(
                          backgroundImage: user.photoURL != null
                              ? NetworkImage(user.photoURL!)
                              : null,
                          radius: 50,
                          child: user.photoURL == null
                              ? const Icon(Icons.person, size: 50)
                              : null,
                        ),
                        const SizedBox(height: 16.0),
                        Text('Welcome, ${user.displayName ?? 'User'}!'),
                        const SizedBox(height: 16.0),
                        Text('Email: ${user.email ?? 'N/A'}'),
                        const SizedBox(height: 16.0),
                        Consumer<UserModel>(
                          builder: (context, userModel, child) {
                            // Add this print statement
                            
                            return Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('Likes: ${userModel.likes}'),
                                Text('Fame: ${userModel.fame}'),
                                const SizedBox(height: 16.0),

                                const SizedBox(height: 16.0),
                                Text(
                                  'Last Submitted Word: ${userModel.lastSubmittedWord ?? 'N/A'}',
                                ),
                                Text(
                                  'Last Submission Date: ${userModel.lastSubmissionDate != null ? DateFormat('yyyy-MM-dd â€“ kk:mm').format(userModel.lastSubmissionDate!) : 'N/A'}',
                                ),
                              ],
                            );
                          },
                        ),
                      ],
                      const SizedBox(height: 16.0),
                      ElevatedButton(
                        onPressed: () async {
                          await _auth.signOut();
                          Navigator.pushReplacementNamed(context, '/login');
                        },
                        child: const Text('Sign Out'),
                      ),
                    ],
                  ),
      ),
    );
  }

  Future<void> _fetchUserData(UserModel userModel) async {
    final user = _auth.currentUser;
    if (user != null) {
      try {
        final userDoc = await FirebaseFirestore.instance.collection('users').doc(user.uid).get();
        if (userDoc.exists) {
          userModel.updateFromFirestore(userDoc);
        }
      } catch (e) {
        setState(() {
          _errorMessage = 'Error fetching user data: $e';
        });
      } finally {
        setState(() {
          _isLoading = false; // Set loading state to false after fetching
        });
      }
    } else {
      setState(() {
        _isLoading = false; // Set loading state to false if no user is logged in
        _errorMessage = 'No user logged in.';
      });
    }
  }
}
